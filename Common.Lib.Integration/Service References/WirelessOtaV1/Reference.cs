//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.WirelessOtaV1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WirelessOtaConfigElementType", Namespace="http://schemas.datacontract.org/2004/07/WirelessOtaV1")]
    [System.SerializableAttribute()]
    public partial class WirelessOtaConfigElementType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> ACCOLCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthenticationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EVDO_PRLfilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> EXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> FIRSTCHPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> HOME_SIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> IMSI_M_ADDR_NUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> IMSI_M_CLASSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IMSI_M_SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> IMSI__M_11_12Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> LocalControlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MCC_MField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MOB_P_REVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MOB_TERM_FOR_NIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MOB_TERM_FOR_SIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> MOB_TERM_HOMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OneXRtt_PRLfilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<uint> SCMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.WirelessOtaV1.SystemNetworkIDType[] SystemAndNetworkIDsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> ACCOLC {
            get {
                return this.ACCOLCField;
            }
            set {
                if ((this.ACCOLCField.Equals(value) != true)) {
                    this.ACCOLCField = value;
                    this.RaisePropertyChanged("ACCOLC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Authentication {
            get {
                return this.AuthenticationField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthenticationField, value) != true)) {
                    this.AuthenticationField = value;
                    this.RaisePropertyChanged("Authentication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EVDO_PRLfilename {
            get {
                return this.EVDO_PRLfilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.EVDO_PRLfilenameField, value) != true)) {
                    this.EVDO_PRLfilenameField = value;
                    this.RaisePropertyChanged("EVDO_PRLfilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> EX {
            get {
                return this.EXField;
            }
            set {
                if ((this.EXField.Equals(value) != true)) {
                    this.EXField = value;
                    this.RaisePropertyChanged("EX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> FIRSTCHP {
            get {
                return this.FIRSTCHPField;
            }
            set {
                if ((this.FIRSTCHPField.Equals(value) != true)) {
                    this.FIRSTCHPField = value;
                    this.RaisePropertyChanged("FIRSTCHP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> HOME_SID {
            get {
                return this.HOME_SIDField;
            }
            set {
                if ((this.HOME_SIDField.Equals(value) != true)) {
                    this.HOME_SIDField = value;
                    this.RaisePropertyChanged("HOME_SID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> IMSI_M_ADDR_NUM {
            get {
                return this.IMSI_M_ADDR_NUMField;
            }
            set {
                if ((this.IMSI_M_ADDR_NUMField.Equals(value) != true)) {
                    this.IMSI_M_ADDR_NUMField = value;
                    this.RaisePropertyChanged("IMSI_M_ADDR_NUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> IMSI_M_CLASS {
            get {
                return this.IMSI_M_CLASSField;
            }
            set {
                if ((this.IMSI_M_CLASSField.Equals(value) != true)) {
                    this.IMSI_M_CLASSField = value;
                    this.RaisePropertyChanged("IMSI_M_CLASS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IMSI_M_S {
            get {
                return this.IMSI_M_SField;
            }
            set {
                if ((object.ReferenceEquals(this.IMSI_M_SField, value) != true)) {
                    this.IMSI_M_SField = value;
                    this.RaisePropertyChanged("IMSI_M_S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> IMSI__M_11_12 {
            get {
                return this.IMSI__M_11_12Field;
            }
            set {
                if ((this.IMSI__M_11_12Field.Equals(value) != true)) {
                    this.IMSI__M_11_12Field = value;
                    this.RaisePropertyChanged("IMSI__M_11_12");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> LocalControl {
            get {
                return this.LocalControlField;
            }
            set {
                if ((this.LocalControlField.Equals(value) != true)) {
                    this.LocalControlField = value;
                    this.RaisePropertyChanged("LocalControl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> MCC_M {
            get {
                return this.MCC_MField;
            }
            set {
                if ((this.MCC_MField.Equals(value) != true)) {
                    this.MCC_MField = value;
                    this.RaisePropertyChanged("MCC_M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> MOB_P_REV {
            get {
                return this.MOB_P_REVField;
            }
            set {
                if ((this.MOB_P_REVField.Equals(value) != true)) {
                    this.MOB_P_REVField = value;
                    this.RaisePropertyChanged("MOB_P_REV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> MOB_TERM_FOR_NID {
            get {
                return this.MOB_TERM_FOR_NIDField;
            }
            set {
                if ((this.MOB_TERM_FOR_NIDField.Equals(value) != true)) {
                    this.MOB_TERM_FOR_NIDField = value;
                    this.RaisePropertyChanged("MOB_TERM_FOR_NID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> MOB_TERM_FOR_SID {
            get {
                return this.MOB_TERM_FOR_SIDField;
            }
            set {
                if ((this.MOB_TERM_FOR_SIDField.Equals(value) != true)) {
                    this.MOB_TERM_FOR_SIDField = value;
                    this.RaisePropertyChanged("MOB_TERM_FOR_SID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> MOB_TERM_HOM {
            get {
                return this.MOB_TERM_HOMField;
            }
            set {
                if ((this.MOB_TERM_HOMField.Equals(value) != true)) {
                    this.MOB_TERM_HOMField = value;
                    this.RaisePropertyChanged("MOB_TERM_HOM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OneXRtt_PRLfilename {
            get {
                return this.OneXRtt_PRLfilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.OneXRtt_PRLfilenameField, value) != true)) {
                    this.OneXRtt_PRLfilenameField = value;
                    this.RaisePropertyChanged("OneXRtt_PRLfilename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<uint> SCM {
            get {
                return this.SCMField;
            }
            set {
                if ((this.SCMField.Equals(value) != true)) {
                    this.SCMField = value;
                    this.RaisePropertyChanged("SCM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string System {
            get {
                return this.SystemField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemField, value) != true)) {
                    this.SystemField = value;
                    this.RaisePropertyChanged("System");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.WirelessOtaV1.SystemNetworkIDType[] SystemAndNetworkIDs {
            get {
                return this.SystemAndNetworkIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemAndNetworkIDsField, value) != true)) {
                    this.SystemAndNetworkIDsField = value;
                    this.RaisePropertyChanged("SystemAndNetworkIDs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemNetworkIDType", Namespace="http://schemas.datacontract.org/2004/07/WirelessOtaV1")]
    [System.SerializableAttribute()]
    public partial class SystemNetworkIDType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint SIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint NID {
            get {
                return this.NIDField;
            }
            set {
                if ((this.NIDField.Equals(value) != true)) {
                    this.NIDField = value;
                    this.RaisePropertyChanged("NID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint SID {
            get {
                return this.SIDField;
            }
            set {
                if ((this.SIDField.Equals(value) != true)) {
                    this.SIDField = value;
                    this.RaisePropertyChanged("SID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string System {
            get {
                return this.SystemField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemField, value) != true)) {
                    this.SystemField = value;
                    this.RaisePropertyChanged("System");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WirelessOtaSubscriberType", Namespace="http://schemas.datacontract.org/2004/07/WirelessOtaV1")]
    [System.SerializableAttribute()]
    public partial class WirelessOtaSubscriberType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ActivationCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EsnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirmwareRevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MdnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileStationModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PRLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PRLcountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SSPRRevField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ActivationCount {
            get {
                return this.ActivationCountField;
            }
            set {
                if ((this.ActivationCountField.Equals(value) != true)) {
                    this.ActivationCountField = value;
                    this.RaisePropertyChanged("ActivationCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Esn {
            get {
                return this.EsnField;
            }
            set {
                if ((object.ReferenceEquals(this.EsnField, value) != true)) {
                    this.EsnField = value;
                    this.RaisePropertyChanged("Esn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirmwareRevision {
            get {
                return this.FirmwareRevisionField;
            }
            set {
                if ((object.ReferenceEquals(this.FirmwareRevisionField, value) != true)) {
                    this.FirmwareRevisionField = value;
                    this.RaisePropertyChanged("FirmwareRevision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastUpdateField, value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mdn {
            get {
                return this.MdnField;
            }
            set {
                if ((object.ReferenceEquals(this.MdnField, value) != true)) {
                    this.MdnField = value;
                    this.RaisePropertyChanged("Mdn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Meid {
            get {
                return this.MeidField;
            }
            set {
                if ((object.ReferenceEquals(this.MeidField, value) != true)) {
                    this.MeidField = value;
                    this.RaisePropertyChanged("Meid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Min {
            get {
                return this.MinField;
            }
            set {
                if ((object.ReferenceEquals(this.MinField, value) != true)) {
                    this.MinField = value;
                    this.RaisePropertyChanged("Min");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileStationModel {
            get {
                return this.MobileStationModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileStationModelField, value) != true)) {
                    this.MobileStationModelField = value;
                    this.RaisePropertyChanged("MobileStationModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PRL {
            get {
                return this.PRLField;
            }
            set {
                if ((object.ReferenceEquals(this.PRLField, value) != true)) {
                    this.PRLField = value;
                    this.RaisePropertyChanged("PRL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PRLcount {
            get {
                return this.PRLcountField;
            }
            set {
                if ((this.PRLcountField.Equals(value) != true)) {
                    this.PRLcountField = value;
                    this.RaisePropertyChanged("PRLcount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSPRRev {
            get {
                return this.SSPRRevField;
            }
            set {
                if ((object.ReferenceEquals(this.SSPRRevField, value) != true)) {
                    this.SSPRRevField = value;
                    this.RaisePropertyChanged("SSPRRev");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subscriber {
            get {
                return this.SubscriberField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriberField, value) != true)) {
                    this.SubscriberField = value;
                    this.RaisePropertyChanged("Subscriber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnouncementCode", Namespace="http://schemas.datacontract.org/2004/07/WirelessOtaV1")]
    [System.SerializableAttribute()]
    public partial class AnnouncementCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AnnouncementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AnnouncementID {
            get {
                return this.AnnouncementIDField;
            }
            set {
                if ((this.AnnouncementIDField.Equals(value) != true)) {
                    this.AnnouncementIDField = value;
                    this.RaisePropertyChanged("AnnouncementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WirelessOtaV1.IWirelessOta")]
    public interface IWirelessOta {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/SetWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/SetWirelessOtaConfigResponse")]
        void SetWirelessOtaConfig(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/SetWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/SetWirelessOtaConfigResponse")]
        System.Threading.Tasks.Task SetWirelessOtaConfigAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/RemoveWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/RemoveWirelessOtaConfigResponse")]
        void RemoveWirelessOtaConfig(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/RemoveWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/RemoveWirelessOtaConfigResponse")]
        System.Threading.Tasks.Task RemoveWirelessOtaConfigAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/GetWirelessOtaConfigResponse")]
        Common.WirelessOtaV1.WirelessOtaConfigElementType[] GetWirelessOtaConfig(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetWirelessOtaConfig", ReplyAction="http://tempuri.org/IWirelessOta/GetWirelessOtaConfigResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaConfigElementType[]> GetWirelessOtaConfigAsync(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/AddSystemNetworkID", ReplyAction="http://tempuri.org/IWirelessOta/AddSystemNetworkIDResponse")]
        void AddSystemNetworkID(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/AddSystemNetworkID", ReplyAction="http://tempuri.org/IWirelessOta/AddSystemNetworkIDResponse")]
        System.Threading.Tasks.Task AddSystemNetworkIDAsync(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/DeleteSystemNetworkID", ReplyAction="http://tempuri.org/IWirelessOta/DeleteSystemNetworkIDResponse")]
        void DeleteSystemNetworkID(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/DeleteSystemNetworkID", ReplyAction="http://tempuri.org/IWirelessOta/DeleteSystemNetworkIDResponse")]
        System.Threading.Tasks.Task DeleteSystemNetworkIDAsync(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetSystemNetworkIDs", ReplyAction="http://tempuri.org/IWirelessOta/GetSystemNetworkIDsResponse")]
        Common.WirelessOtaV1.SystemNetworkIDType[] GetSystemNetworkIDs(string loginToken, string systemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetSystemNetworkIDs", ReplyAction="http://tempuri.org/IWirelessOta/GetSystemNetworkIDsResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.SystemNetworkIDType[]> GetSystemNetworkIDsAsync(string loginToken, string systemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/InsertWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/InsertWirelessOtaElementResponse")]
        void InsertWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/InsertWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/InsertWirelessOtaElementResponse")]
        System.Threading.Tasks.Task InsertWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/UpdateWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/UpdateWirelessOtaElementResponse")]
        void UpdateWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/UpdateWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/UpdateWirelessOtaElementResponse")]
        System.Threading.Tasks.Task UpdateWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/DeleteWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/DeleteWirelessOtaElementResponse")]
        void DeleteWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/DeleteWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/DeleteWirelessOtaElementResponse")]
        System.Threading.Tasks.Task DeleteWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementResponse")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElement(string loginToken, string MEID, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElement", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementAsync(string loginToken, string MEID, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEID", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDResponse")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByMEID(string loginToken, string MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEID", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByMEIDAsync(string loginToken, string MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESN", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNResponse")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByESN(string loginToken, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESN", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByESNAsync(string loginToken, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMIN", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMINResponse")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByMIN(string loginToken, string MIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMIN", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMINResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByMINAsync(string loginToken, string MIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementV2Response")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementV2(string loginToken, string subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementV2Response")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementV2Async(string loginToken, string subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDV2Response")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType[] FindWirelessOtaElementByMEIDV2(string loginToken, string MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByMEIDV2Response")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType[]> FindWirelessOtaElementByMEIDV2Async(string loginToken, string MEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNV2Response")]
        Common.WirelessOtaV1.WirelessOtaSubscriberType[] FindWirelessOtaElementByESNV2(string loginToken, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNV2", ReplyAction="http://tempuri.org/IWirelessOta/FindWirelessOtaElementByESNV2Response")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType[]> FindWirelessOtaElementByESNV2Async(string loginToken, string ESN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetAllAnnouncementCodes", ReplyAction="http://tempuri.org/IWirelessOta/GetAllAnnouncementCodesResponse")]
        Common.WirelessOtaV1.AnnouncementCode[] GetAllAnnouncementCodes(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWirelessOta/GetAllAnnouncementCodes", ReplyAction="http://tempuri.org/IWirelessOta/GetAllAnnouncementCodesResponse")]
        System.Threading.Tasks.Task<Common.WirelessOtaV1.AnnouncementCode[]> GetAllAnnouncementCodesAsync(string loginToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWirelessOtaChannel : Common.WirelessOtaV1.IWirelessOta, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WirelessOtaClient : System.ServiceModel.ClientBase<Common.WirelessOtaV1.IWirelessOta>, Common.WirelessOtaV1.IWirelessOta {
        
        public WirelessOtaClient() {
        }
        
        public WirelessOtaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WirelessOtaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WirelessOtaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WirelessOtaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetWirelessOtaConfig(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config) {
            base.Channel.SetWirelessOtaConfig(loginToken, config);
        }
        
        public System.Threading.Tasks.Task SetWirelessOtaConfigAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config) {
            return base.Channel.SetWirelessOtaConfigAsync(loginToken, config);
        }
        
        public void RemoveWirelessOtaConfig(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config) {
            base.Channel.RemoveWirelessOtaConfig(loginToken, config);
        }
        
        public System.Threading.Tasks.Task RemoveWirelessOtaConfigAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaConfigElementType config) {
            return base.Channel.RemoveWirelessOtaConfigAsync(loginToken, config);
        }
        
        public Common.WirelessOtaV1.WirelessOtaConfigElementType[] GetWirelessOtaConfig(string loginToken) {
            return base.Channel.GetWirelessOtaConfig(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaConfigElementType[]> GetWirelessOtaConfigAsync(string loginToken) {
            return base.Channel.GetWirelessOtaConfigAsync(loginToken);
        }
        
        public void AddSystemNetworkID(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data) {
            base.Channel.AddSystemNetworkID(loginToken, data);
        }
        
        public System.Threading.Tasks.Task AddSystemNetworkIDAsync(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data) {
            return base.Channel.AddSystemNetworkIDAsync(loginToken, data);
        }
        
        public void DeleteSystemNetworkID(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data) {
            base.Channel.DeleteSystemNetworkID(loginToken, data);
        }
        
        public System.Threading.Tasks.Task DeleteSystemNetworkIDAsync(string loginToken, Common.WirelessOtaV1.SystemNetworkIDType data) {
            return base.Channel.DeleteSystemNetworkIDAsync(loginToken, data);
        }
        
        public Common.WirelessOtaV1.SystemNetworkIDType[] GetSystemNetworkIDs(string loginToken, string systemName) {
            return base.Channel.GetSystemNetworkIDs(loginToken, systemName);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.SystemNetworkIDType[]> GetSystemNetworkIDsAsync(string loginToken, string systemName) {
            return base.Channel.GetSystemNetworkIDsAsync(loginToken, systemName);
        }
        
        public void InsertWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            base.Channel.InsertWirelessOtaElement(loginToken, data);
        }
        
        public System.Threading.Tasks.Task InsertWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            return base.Channel.InsertWirelessOtaElementAsync(loginToken, data);
        }
        
        public void UpdateWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            base.Channel.UpdateWirelessOtaElement(loginToken, data);
        }
        
        public System.Threading.Tasks.Task UpdateWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            return base.Channel.UpdateWirelessOtaElementAsync(loginToken, data);
        }
        
        public void DeleteWirelessOtaElement(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            base.Channel.DeleteWirelessOtaElement(loginToken, data);
        }
        
        public System.Threading.Tasks.Task DeleteWirelessOtaElementAsync(string loginToken, Common.WirelessOtaV1.WirelessOtaSubscriberType data) {
            return base.Channel.DeleteWirelessOtaElementAsync(loginToken, data);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElement(string loginToken, string MEID, string ESN) {
            return base.Channel.FindWirelessOtaElement(loginToken, MEID, ESN);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementAsync(string loginToken, string MEID, string ESN) {
            return base.Channel.FindWirelessOtaElementAsync(loginToken, MEID, ESN);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByMEID(string loginToken, string MEID) {
            return base.Channel.FindWirelessOtaElementByMEID(loginToken, MEID);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByMEIDAsync(string loginToken, string MEID) {
            return base.Channel.FindWirelessOtaElementByMEIDAsync(loginToken, MEID);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByESN(string loginToken, string ESN) {
            return base.Channel.FindWirelessOtaElementByESN(loginToken, ESN);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByESNAsync(string loginToken, string ESN) {
            return base.Channel.FindWirelessOtaElementByESNAsync(loginToken, ESN);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementByMIN(string loginToken, string MIN) {
            return base.Channel.FindWirelessOtaElementByMIN(loginToken, MIN);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementByMINAsync(string loginToken, string MIN) {
            return base.Channel.FindWirelessOtaElementByMINAsync(loginToken, MIN);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType FindWirelessOtaElementV2(string loginToken, string subscriber) {
            return base.Channel.FindWirelessOtaElementV2(loginToken, subscriber);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType> FindWirelessOtaElementV2Async(string loginToken, string subscriber) {
            return base.Channel.FindWirelessOtaElementV2Async(loginToken, subscriber);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType[] FindWirelessOtaElementByMEIDV2(string loginToken, string MEID) {
            return base.Channel.FindWirelessOtaElementByMEIDV2(loginToken, MEID);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType[]> FindWirelessOtaElementByMEIDV2Async(string loginToken, string MEID) {
            return base.Channel.FindWirelessOtaElementByMEIDV2Async(loginToken, MEID);
        }
        
        public Common.WirelessOtaV1.WirelessOtaSubscriberType[] FindWirelessOtaElementByESNV2(string loginToken, string ESN) {
            return base.Channel.FindWirelessOtaElementByESNV2(loginToken, ESN);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.WirelessOtaSubscriberType[]> FindWirelessOtaElementByESNV2Async(string loginToken, string ESN) {
            return base.Channel.FindWirelessOtaElementByESNV2Async(loginToken, ESN);
        }
        
        public Common.WirelessOtaV1.AnnouncementCode[] GetAllAnnouncementCodes(string loginToken) {
            return base.Channel.GetAllAnnouncementCodes(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.WirelessOtaV1.AnnouncementCode[]> GetAllAnnouncementCodesAsync(string loginToken) {
            return base.Channel.GetAllAnnouncementCodesAsync(loginToken);
        }
    }
}
