//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.ServiceReport {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceVersions", Namespace="http://schemas.datacontract.org/2004/07/ServiceReportV1")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Common.ServiceReport.ApiVersions))]
    public partial class ServiceVersions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallLoggingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CallingNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeNumberAnnouncementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IptvField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IptvAluMmigField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IptvMediaroomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LargeScaleConferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocalNumberPortabilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NotifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OnDemandConferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OriginatingCallManagementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SipAcsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubscriberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TerminatingCallManagementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UniversalCallManagementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VoicemailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WirelessOtaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallLogging {
            get {
                return this.CallLoggingField;
            }
            set {
                if ((this.CallLoggingField.Equals(value) != true)) {
                    this.CallLoggingField = value;
                    this.RaisePropertyChanged("CallLogging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CallingName {
            get {
                return this.CallingNameField;
            }
            set {
                if ((this.CallingNameField.Equals(value) != true)) {
                    this.CallingNameField = value;
                    this.RaisePropertyChanged("CallingName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeNumberAnnouncements {
            get {
                return this.ChangeNumberAnnouncementsField;
            }
            set {
                if ((this.ChangeNumberAnnouncementsField.Equals(value) != true)) {
                    this.ChangeNumberAnnouncementsField = value;
                    this.RaisePropertyChanged("ChangeNumberAnnouncements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Iptv {
            get {
                return this.IptvField;
            }
            set {
                if ((this.IptvField.Equals(value) != true)) {
                    this.IptvField = value;
                    this.RaisePropertyChanged("Iptv");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IptvAluMmig {
            get {
                return this.IptvAluMmigField;
            }
            set {
                if ((this.IptvAluMmigField.Equals(value) != true)) {
                    this.IptvAluMmigField = value;
                    this.RaisePropertyChanged("IptvAluMmig");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IptvMediaroom {
            get {
                return this.IptvMediaroomField;
            }
            set {
                if ((this.IptvMediaroomField.Equals(value) != true)) {
                    this.IptvMediaroomField = value;
                    this.RaisePropertyChanged("IptvMediaroom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LargeScaleConference {
            get {
                return this.LargeScaleConferenceField;
            }
            set {
                if ((this.LargeScaleConferenceField.Equals(value) != true)) {
                    this.LargeScaleConferenceField = value;
                    this.RaisePropertyChanged("LargeScaleConference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocalNumberPortability {
            get {
                return this.LocalNumberPortabilityField;
            }
            set {
                if ((this.LocalNumberPortabilityField.Equals(value) != true)) {
                    this.LocalNumberPortabilityField = value;
                    this.RaisePropertyChanged("LocalNumberPortability");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Notify {
            get {
                return this.NotifyField;
            }
            set {
                if ((this.NotifyField.Equals(value) != true)) {
                    this.NotifyField = value;
                    this.RaisePropertyChanged("Notify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OnDemandConference {
            get {
                return this.OnDemandConferenceField;
            }
            set {
                if ((this.OnDemandConferenceField.Equals(value) != true)) {
                    this.OnDemandConferenceField = value;
                    this.RaisePropertyChanged("OnDemandConference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OriginatingCallManagement {
            get {
                return this.OriginatingCallManagementField;
            }
            set {
                if ((this.OriginatingCallManagementField.Equals(value) != true)) {
                    this.OriginatingCallManagementField = value;
                    this.RaisePropertyChanged("OriginatingCallManagement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SipAcs {
            get {
                return this.SipAcsField;
            }
            set {
                if ((this.SipAcsField.Equals(value) != true)) {
                    this.SipAcsField = value;
                    this.RaisePropertyChanged("SipAcs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subscriber {
            get {
                return this.SubscriberField;
            }
            set {
                if ((this.SubscriberField.Equals(value) != true)) {
                    this.SubscriberField = value;
                    this.RaisePropertyChanged("Subscriber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TerminatingCallManagement {
            get {
                return this.TerminatingCallManagementField;
            }
            set {
                if ((this.TerminatingCallManagementField.Equals(value) != true)) {
                    this.TerminatingCallManagementField = value;
                    this.RaisePropertyChanged("TerminatingCallManagement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UniversalCallManagement {
            get {
                return this.UniversalCallManagementField;
            }
            set {
                if ((this.UniversalCallManagementField.Equals(value) != true)) {
                    this.UniversalCallManagementField = value;
                    this.RaisePropertyChanged("UniversalCallManagement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Voicemail {
            get {
                return this.VoicemailField;
            }
            set {
                if ((this.VoicemailField.Equals(value) != true)) {
                    this.VoicemailField = value;
                    this.RaisePropertyChanged("Voicemail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WirelessOta {
            get {
                return this.WirelessOtaField;
            }
            set {
                if ((this.WirelessOtaField.Equals(value) != true)) {
                    this.WirelessOtaField = value;
                    this.RaisePropertyChanged("WirelessOta");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApiVersions", Namespace="http://schemas.datacontract.org/2004/07/ServiceReportV1")]
    [System.SerializableAttribute()]
    public partial class ApiVersions : Common.ServiceReport.ServiceVersions {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReport.IServiceReport")]
    public interface IServiceReport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/GetAPmaxServiceVersions", ReplyAction="http://tempuri.org/IServiceReport/GetAPmaxServiceVersionsResponse")]
        Common.ServiceReport.ServiceVersions GetAPmaxServiceVersions(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/GetAPmaxServiceVersions", ReplyAction="http://tempuri.org/IServiceReport/GetAPmaxServiceVersionsResponse")]
        System.Threading.Tasks.Task<Common.ServiceReport.ServiceVersions> GetAPmaxServiceVersionsAsync(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/GetApiServiceVersions", ReplyAction="http://tempuri.org/IServiceReport/GetApiServiceVersionsResponse")]
        Common.ServiceReport.ApiVersions GetApiServiceVersions(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/GetApiServiceVersions", ReplyAction="http://tempuri.org/IServiceReport/GetApiServiceVersionsResponse")]
        System.Threading.Tasks.Task<Common.ServiceReport.ApiVersions> GetApiServiceVersionsAsync(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ServiceProvisioningHostVersion", ReplyAction="http://tempuri.org/IServiceReport/ServiceProvisioningHostVersionResponse")]
        string ServiceProvisioningHostVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ServiceProvisioningHostVersion", ReplyAction="http://tempuri.org/IServiceReport/ServiceProvisioningHostVersionResponse")]
        System.Threading.Tasks.Task<string> ServiceProvisioningHostVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/IsCommandLinkEnabled", ReplyAction="http://tempuri.org/IServiceReport/IsCommandLinkEnabledResponse")]
        bool IsCommandLinkEnabled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/IsCommandLinkEnabled", ReplyAction="http://tempuri.org/IServiceReport/IsCommandLinkEnabledResponse")]
        System.Threading.Tasks.Task<bool> IsCommandLinkEnabledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/SetCommandLink", ReplyAction="http://tempuri.org/IServiceReport/SetCommandLinkResponse")]
        void SetCommandLink(bool commandLinkEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/SetCommandLink", ReplyAction="http://tempuri.org/IServiceReport/SetCommandLinkResponse")]
        System.Threading.Tasks.Task SetCommandLinkAsync(bool commandLinkEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ClearCache", ReplyAction="http://tempuri.org/IServiceReport/ClearCacheResponse")]
        void ClearCache(bool clearCacheLogs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ClearCache", ReplyAction="http://tempuri.org/IServiceReport/ClearCacheResponse")]
        System.Threading.Tasks.Task ClearCacheAsync(bool clearCacheLogs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceReportChannel : Common.ServiceReport.IServiceReport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceReportClient : System.ServiceModel.ClientBase<Common.ServiceReport.IServiceReport>, Common.ServiceReport.IServiceReport {
        
        public ServiceReportClient() {
        }
        
        public ServiceReportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceReportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceReportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceReportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Common.ServiceReport.ServiceVersions GetAPmaxServiceVersions(string loginToken) {
            return base.Channel.GetAPmaxServiceVersions(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.ServiceReport.ServiceVersions> GetAPmaxServiceVersionsAsync(string loginToken) {
            return base.Channel.GetAPmaxServiceVersionsAsync(loginToken);
        }
        
        public Common.ServiceReport.ApiVersions GetApiServiceVersions(string loginToken) {
            return base.Channel.GetApiServiceVersions(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.ServiceReport.ApiVersions> GetApiServiceVersionsAsync(string loginToken) {
            return base.Channel.GetApiServiceVersionsAsync(loginToken);
        }
        
        public string ServiceProvisioningHostVersion() {
            return base.Channel.ServiceProvisioningHostVersion();
        }
        
        public System.Threading.Tasks.Task<string> ServiceProvisioningHostVersionAsync() {
            return base.Channel.ServiceProvisioningHostVersionAsync();
        }
        
        public bool IsCommandLinkEnabled() {
            return base.Channel.IsCommandLinkEnabled();
        }
        
        public System.Threading.Tasks.Task<bool> IsCommandLinkEnabledAsync() {
            return base.Channel.IsCommandLinkEnabledAsync();
        }
        
        public void SetCommandLink(bool commandLinkEnabled) {
            base.Channel.SetCommandLink(commandLinkEnabled);
        }
        
        public System.Threading.Tasks.Task SetCommandLinkAsync(bool commandLinkEnabled) {
            return base.Channel.SetCommandLinkAsync(commandLinkEnabled);
        }
        
        public void ClearCache(bool clearCacheLogs) {
            base.Channel.ClearCache(clearCacheLogs);
        }
        
        public System.Threading.Tasks.Task ClearCacheAsync(bool clearCacheLogs) {
            return base.Channel.ClearCacheAsync(clearCacheLogs);
        }
    }
}
