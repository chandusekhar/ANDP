//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.LargeScaleConferenceV1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecordingsType", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    [System.SerializableAttribute()]
    public partial class RecordingsType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecordingFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountIDField, value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecordingFile {
            get {
                return this.RecordingFileField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordingFileField, value) != true)) {
                    this.RecordingFileField = value;
                    this.RaisePropertyChanged("RecordingFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((object.ReferenceEquals(this.TimestampField, value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlackListType", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    [System.SerializableAttribute()]
    public partial class BlackListType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallingPartyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountIDField, value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallingParty {
            get {
                return this.CallingPartyField;
            }
            set {
                if ((object.ReferenceEquals(this.CallingPartyField, value) != true)) {
                    this.CallingPartyField = value;
                    this.RaisePropertyChanged("CallingParty");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessNumberType", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    [System.SerializableAttribute()]
    public partial class AccessNumberType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessNumber {
            get {
                return this.AccessNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessNumberField, value) != true)) {
                    this.AccessNumberField = value;
                    this.RaisePropertyChanged("AccessNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountIDField, value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreeConferenceType", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    [System.SerializableAttribute()]
    public partial class FreeConferenceType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.AccessNumberType[] AccessNumbersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> AdminTerminateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.BlackListType[] BlackListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConferenceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomIntroductionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Common.LargeScaleConferenceV1.EntryAction_e> EntryActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Common.LargeScaleConferenceV1.EntryMode_e> EntryModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Common.LargeScaleConferenceV1.ExitAction_e> ExitActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> PlayAttendeeCountOnEntryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.RecordingsType[] RecordingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> SendEmailReportField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.AccessNumberType[] AccessNumbers {
            get {
                return this.AccessNumbersField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessNumbersField, value) != true)) {
                    this.AccessNumbersField = value;
                    this.RaisePropertyChanged("AccessNumbers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountID {
            get {
                return this.AccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountIDField, value) != true)) {
                    this.AccountIDField = value;
                    this.RaisePropertyChanged("AccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> AdminTerminate {
            get {
                return this.AdminTerminateField;
            }
            set {
                if ((this.AdminTerminateField.Equals(value) != true)) {
                    this.AdminTerminateField = value;
                    this.RaisePropertyChanged("AdminTerminate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.BlackListType[] BlackList {
            get {
                return this.BlackListField;
            }
            set {
                if ((object.ReferenceEquals(this.BlackListField, value) != true)) {
                    this.BlackListField = value;
                    this.RaisePropertyChanged("BlackList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConferenceID {
            get {
                return this.ConferenceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ConferenceIDField, value) != true)) {
                    this.ConferenceIDField = value;
                    this.RaisePropertyChanged("ConferenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomIntroduction {
            get {
                return this.CustomIntroductionField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomIntroductionField, value) != true)) {
                    this.CustomIntroductionField = value;
                    this.RaisePropertyChanged("CustomIntroduction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Directory {
            get {
                return this.DirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryField, value) != true)) {
                    this.DirectoryField = value;
                    this.RaisePropertyChanged("Directory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Common.LargeScaleConferenceV1.EntryAction_e> EntryAction {
            get {
                return this.EntryActionField;
            }
            set {
                if ((this.EntryActionField.Equals(value) != true)) {
                    this.EntryActionField = value;
                    this.RaisePropertyChanged("EntryAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Common.LargeScaleConferenceV1.EntryMode_e> EntryMode {
            get {
                return this.EntryModeField;
            }
            set {
                if ((this.EntryModeField.Equals(value) != true)) {
                    this.EntryModeField = value;
                    this.RaisePropertyChanged("EntryMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Common.LargeScaleConferenceV1.ExitAction_e> ExitAction {
            get {
                return this.ExitActionField;
            }
            set {
                if ((this.ExitActionField.Equals(value) != true)) {
                    this.ExitActionField = value;
                    this.RaisePropertyChanged("ExitAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pin {
            get {
                return this.PinField;
            }
            set {
                if ((object.ReferenceEquals(this.PinField, value) != true)) {
                    this.PinField = value;
                    this.RaisePropertyChanged("Pin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> PlayAttendeeCountOnEntry {
            get {
                return this.PlayAttendeeCountOnEntryField;
            }
            set {
                if ((this.PlayAttendeeCountOnEntryField.Equals(value) != true)) {
                    this.PlayAttendeeCountOnEntryField = value;
                    this.RaisePropertyChanged("PlayAttendeeCountOnEntry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.RecordingsType[] Recordings {
            get {
                return this.RecordingsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordingsField, value) != true)) {
                    this.RecordingsField = value;
                    this.RaisePropertyChanged("Recordings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> SendEmailReport {
            get {
                return this.SendEmailReportField;
            }
            set {
                if ((this.SendEmailReportField.Equals(value) != true)) {
                    this.SendEmailReportField = value;
                    this.RaisePropertyChanged("SendEmailReport");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntryAction_e", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    public enum EntryAction_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryAction_NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryAction_TONE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryAction_RECORDEDNAME = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntryMode_e", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    public enum EntryMode_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryMode_NORMAL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryMode_MUTED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EntryMode_MUTEDDTMF = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExitAction_e", Namespace="http://schemas.datacontract.org/2004/07/LargeScaleConferenceV1")]
    public enum ExitAction_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExitAction_NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExitAction_TONE = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriberType", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    [System.SerializableAttribute()]
    public partial class SubscriberType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.AddressInfoType[] AddressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingAccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingEnvironmentCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingServiceAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DialByNameDigitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.InternetAccessType InternetAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastUpdateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastUpdatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentSubscriberIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.PlacementType_e PlacementTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.ServiceInfoType ServiceInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriberDefaultPhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriberEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriberGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubscriberNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.Timezone_e SubscriberTimezoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.AddressInfoType[] Addresses {
            get {
                return this.AddressesField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressesField, value) != true)) {
                    this.AddressesField = value;
                    this.RaisePropertyChanged("Addresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingAccountNumber {
            get {
                return this.BillingAccountNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingAccountNumberField, value) != true)) {
                    this.BillingAccountNumberField = value;
                    this.RaisePropertyChanged("BillingAccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingEnvironmentCode {
            get {
                return this.BillingEnvironmentCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingEnvironmentCodeField, value) != true)) {
                    this.BillingEnvironmentCodeField = value;
                    this.RaisePropertyChanged("BillingEnvironmentCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingServiceAddress {
            get {
                return this.BillingServiceAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingServiceAddressField, value) != true)) {
                    this.BillingServiceAddressField = value;
                    this.RaisePropertyChanged("BillingServiceAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DialByNameDigits {
            get {
                return this.DialByNameDigitsField;
            }
            set {
                if ((object.ReferenceEquals(this.DialByNameDigitsField, value) != true)) {
                    this.DialByNameDigitsField = value;
                    this.RaisePropertyChanged("DialByNameDigits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.InternetAccessType InternetAccess {
            get {
                return this.InternetAccessField;
            }
            set {
                if ((object.ReferenceEquals(this.InternetAccessField, value) != true)) {
                    this.InternetAccessField = value;
                    this.RaisePropertyChanged("InternetAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastUpdateTime {
            get {
                return this.LastUpdateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LastUpdateTimeField, value) != true)) {
                    this.LastUpdateTimeField = value;
                    this.RaisePropertyChanged("LastUpdateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastUpdatedBy {
            get {
                return this.LastUpdatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.LastUpdatedByField, value) != true)) {
                    this.LastUpdatedByField = value;
                    this.RaisePropertyChanged("LastUpdatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LatitudeField, value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LongitudeField, value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentSubscriberId {
            get {
                return this.ParentSubscriberIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentSubscriberIdField, value) != true)) {
                    this.ParentSubscriberIdField = value;
                    this.RaisePropertyChanged("ParentSubscriberId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.PlacementType_e PlacementType {
            get {
                return this.PlacementTypeField;
            }
            set {
                if ((this.PlacementTypeField.Equals(value) != true)) {
                    this.PlacementTypeField = value;
                    this.RaisePropertyChanged("PlacementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.ServiceInfoType ServiceInformation {
            get {
                return this.ServiceInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceInformationField, value) != true)) {
                    this.ServiceInformationField = value;
                    this.RaisePropertyChanged("ServiceInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriberDefaultPhoneNumber {
            get {
                return this.SubscriberDefaultPhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriberDefaultPhoneNumberField, value) != true)) {
                    this.SubscriberDefaultPhoneNumberField = value;
                    this.RaisePropertyChanged("SubscriberDefaultPhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriberEmail {
            get {
                return this.SubscriberEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriberEmailField, value) != true)) {
                    this.SubscriberEmailField = value;
                    this.RaisePropertyChanged("SubscriberEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriberGuid {
            get {
                return this.SubscriberGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriberGuidField, value) != true)) {
                    this.SubscriberGuidField = value;
                    this.RaisePropertyChanged("SubscriberGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubscriberName {
            get {
                return this.SubscriberNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SubscriberNameField, value) != true)) {
                    this.SubscriberNameField = value;
                    this.RaisePropertyChanged("SubscriberName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.Timezone_e SubscriberTimezone {
            get {
                return this.SubscriberTimezoneField;
            }
            set {
                if ((this.SubscriberTimezoneField.Equals(value) != true)) {
                    this.SubscriberTimezoneField = value;
                    this.RaisePropertyChanged("SubscriberTimezone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InternetAccessType", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    [System.SerializableAttribute()]
    public partial class InternetAccessType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MobileEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ServiceEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MobileEnabled {
            get {
                return this.MobileEnabledField;
            }
            set {
                if ((this.MobileEnabledField.Equals(value) != true)) {
                    this.MobileEnabledField = value;
                    this.RaisePropertyChanged("MobileEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ServiceEnabled {
            get {
                return this.ServiceEnabledField;
            }
            set {
                if ((this.ServiceEnabledField.Equals(value) != true)) {
                    this.ServiceEnabledField = value;
                    this.RaisePropertyChanged("ServiceEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInfoType", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    [System.SerializableAttribute()]
    public partial class ServiceInfoType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApSystemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingServiceAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingServiceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.ServiceType_e ServiceTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApSystemId {
            get {
                return this.ApSystemIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ApSystemIdField, value) != true)) {
                    this.ApSystemIdField = value;
                    this.RaisePropertyChanged("ApSystemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingServiceAddress {
            get {
                return this.BillingServiceAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingServiceAddressField, value) != true)) {
                    this.BillingServiceAddressField = value;
                    this.RaisePropertyChanged("BillingServiceAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingServiceID {
            get {
                return this.BillingServiceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingServiceIDField, value) != true)) {
                    this.BillingServiceIDField = value;
                    this.RaisePropertyChanged("BillingServiceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceGuid {
            get {
                return this.ServiceGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceGuidField, value) != true)) {
                    this.ServiceGuidField = value;
                    this.RaisePropertyChanged("ServiceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.ServiceType_e ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((this.ServiceTypeField.Equals(value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressInfoType", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    [System.SerializableAttribute()]
    public partial class AddressInfoType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Common.LargeScaleConferenceV1.AddressType_e AddressTypeFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressField {
            get {
                return this.AddressFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressFieldField, value) != true)) {
                    this.AddressFieldField = value;
                    this.RaisePropertyChanged("AddressField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Common.LargeScaleConferenceV1.AddressType_e AddressTypeField {
            get {
                return this.AddressTypeFieldField;
            }
            set {
                if ((this.AddressTypeFieldField.Equals(value) != true)) {
                    this.AddressTypeFieldField = value;
                    this.RaisePropertyChanged("AddressTypeField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlacementType_e", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    public enum PlacementType_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlacementType_None = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlacementType_CASS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlacementType_User = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Timezone_e", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    public enum Timezone_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApDefault = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Midway = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hawaii = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alaska = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PacificTime = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Arizona = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MountainTime = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CentralTime = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Saskatchewan = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EasternTime = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IndianaEast = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AtlanticTime = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Newfoundland = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressType_e", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    public enum AddressType_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypeDN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypeAnnID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypeEmailAddr = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypeSipAddr = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypMailboxNumber = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressTypCentrexExtension = 15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceType_e", Namespace="http://schemas.datacontract.org/2004/07/APmaxProvisioning")]
    public enum ServiceType_e : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Voicemail = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Iptv = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LargeScaleConferencing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnDemandConferencing = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TerminatingCallManagement = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OriginatingCallManagement = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniversalCallManagement = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CallLogging = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SipAcs = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WirelessOta = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDAgent = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACDCallCenter = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SingleNumber = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Notify = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SipIntercom = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IptvAluMmig = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IptvMediaroom = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VoicemailMobile = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IptvMobile = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotifyMobile = 20,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LargeScaleConferenceV1.ILargeScaleConference")]
    public interface ILargeScaleConference {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteRecordingResponse")]
        void DeleteRecording(string loginToken, string accountID, string recordingFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteRecordingResponse")]
        System.Threading.Tasks.Task DeleteRecordingAsync(string loginToken, string accountID, string recordingFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/FindRecordingResponse")]
        Common.LargeScaleConferenceV1.RecordingsType FindRecording(string loginToken, string accountID, string recordingFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/FindRecordingResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.RecordingsType> FindRecordingAsync(string loginToken, string accountID, string recordingFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindRecordingsForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindRecordingsForFreeConferenceResponse")]
        Common.LargeScaleConferenceV1.RecordingsType[] FindRecordingsForFreeConference(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindRecordingsForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindRecordingsForFreeConferenceResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.RecordingsType[]> FindRecordingsForFreeConferenceAsync(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertBlackListEntryResponse")]
        void InsertBlackListEntry(string loginToken, Common.LargeScaleConferenceV1.BlackListType blackListEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertBlackListEntryResponse")]
        System.Threading.Tasks.Task InsertBlackListEntryAsync(string loginToken, Common.LargeScaleConferenceV1.BlackListType blackListEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteBlackListEntryResponse")]
        void DeleteBlackListEntry(string loginToken, string accountId, string callingParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteBlackListEntryResponse")]
        System.Threading.Tasks.Task DeleteBlackListEntryAsync(string loginToken, string accountId, string callingParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/FindBlackListEntryResponse")]
        Common.LargeScaleConferenceV1.BlackListType FindBlackListEntry(string loginToken, string accountId, string callingParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindBlackListEntry", ReplyAction="http://tempuri.org/ILargeScaleConference/FindBlackListEntryResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.BlackListType> FindBlackListEntryAsync(string loginToken, string accountId, string callingParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindBlackListEntriesForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindBlackListEntriesForFreeConferenceRes" +
            "ponse")]
        Common.LargeScaleConferenceV1.BlackListType[] FindBlackListEntriesForFreeConference(string loginToken, string accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindBlackListEntriesForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindBlackListEntriesForFreeConferenceRes" +
            "ponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.BlackListType[]> FindBlackListEntriesForFreeConferenceAsync(string loginToken, string accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertAccessNumberResponse")]
        void InsertAccessNumber(string loginToken, Common.LargeScaleConferenceV1.AccessNumberType accessNumberEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertAccessNumberResponse")]
        System.Threading.Tasks.Task InsertAccessNumberAsync(string loginToken, Common.LargeScaleConferenceV1.AccessNumberType accessNumberEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteAccessNumberResponse")]
        void DeleteAccessNumber(string loginToken, string accountID, string accessNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteAccessNumberResponse")]
        System.Threading.Tasks.Task DeleteAccessNumberAsync(string loginToken, string accountID, string accessNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/FindAccessNumberResponse")]
        Common.LargeScaleConferenceV1.AccessNumberType FindAccessNumber(string loginToken, string accountID, string accessNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindAccessNumber", ReplyAction="http://tempuri.org/ILargeScaleConference/FindAccessNumberResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.AccessNumberType> FindAccessNumberAsync(string loginToken, string accountID, string accessNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindAccessNumbersForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindAccessNumbersForFreeConferenceRespon" +
            "se")]
        Common.LargeScaleConferenceV1.AccessNumberType[] FindAccessNumbersForFreeConference(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindAccessNumbersForFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindAccessNumbersForFreeConferenceRespon" +
            "se")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.AccessNumberType[]> FindAccessNumbersForFreeConferenceAsync(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceResponse")]
        string InsertFreeConference(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceResponse")]
        System.Threading.Tasks.Task<string> InsertFreeConferenceAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/EditFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/EditFreeConferenceResponse")]
        void EditFreeConference(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, Common.LargeScaleConferenceV1.InternetAccessType internetAccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/EditFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/EditFreeConferenceResponse")]
        System.Threading.Tasks.Task EditFreeConferenceAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, Common.LargeScaleConferenceV1.InternetAccessType internetAccess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceResponse")]
        void DeleteFreeConference(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceResponse")]
        System.Threading.Tasks.Task DeleteFreeConferenceAsync(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindFreeConferenceResponse")]
        Common.LargeScaleConferenceV1.FreeConferenceType FindFreeConference(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindFreeConference", ReplyAction="http://tempuri.org/ILargeScaleConference/FindFreeConferenceResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType> FindFreeConferenceAsync(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/GetFreeConferences", ReplyAction="http://tempuri.org/ILargeScaleConference/GetFreeConferencesResponse")]
        Common.LargeScaleConferenceV1.FreeConferenceType[] GetFreeConferences(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/GetFreeConferences", ReplyAction="http://tempuri.org/ILargeScaleConference/GetFreeConferencesResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType[]> GetFreeConferencesAsync(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceWAccountIDResponse")]
        string InsertFreeConferenceWAccountID(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/InsertFreeConferenceWAccountIDResponse")]
        System.Threading.Tasks.Task<string> InsertFreeConferenceWAccountIDAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceWAccountIDResponse")]
        void DeleteFreeConferenceWAccountID(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/DeleteFreeConferenceWAccountIDResponse")]
        System.Threading.Tasks.Task DeleteFreeConferenceWAccountIDAsync(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/FindFreeConferenceWAccountIDResponse")]
        Common.LargeScaleConferenceV1.FreeConferenceType FindFreeConferenceWAccountID(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/FindFreeConferenceWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/FindFreeConferenceWAccountIDResponse")]
        System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType> FindFreeConferenceWAccountIDAsync(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCustomIntroduction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionResponse")]
        void SetCustomIntroduction(string loginToken, string subscriberAddress, byte[] customIntroduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCustomIntroduction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionResponse")]
        System.Threading.Tasks.Task SetCustomIntroductionAsync(string loginToken, string subscriberAddress, byte[] customIntroduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/ResetCustomIntroduction", ReplyAction="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionResponse")]
        void ResetCustomIntroduction(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/ResetCustomIntroduction", ReplyAction="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionResponse")]
        System.Threading.Tasks.Task ResetCustomIntroductionAsync(string loginToken, string subscriberAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionWAccountIDResponse")]
        void SetCustomIntroductionWAccountID(string loginToken, string accountID, byte[] customIntroduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCustomIntroductionWAccountIDResponse")]
        System.Threading.Tasks.Task SetCustomIntroductionWAccountIDAsync(string loginToken, string accountID, byte[] customIntroduction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionWAccountIDRespons" +
            "e")]
        void ResetCustomIntroductionWAccountID(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionWAccountID", ReplyAction="http://tempuri.org/ILargeScaleConference/ResetCustomIntroductionWAccountIDRespons" +
            "e")]
        System.Threading.Tasks.Task ResetCustomIntroductionWAccountIDAsync(string loginToken, string accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/CallMute", ReplyAction="http://tempuri.org/ILargeScaleConference/CallMuteResponse")]
        void CallMute(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/CallMute", ReplyAction="http://tempuri.org/ILargeScaleConference/CallMuteResponse")]
        System.Threading.Tasks.Task CallMuteAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/CallUnmute", ReplyAction="http://tempuri.org/ILargeScaleConference/CallUnmuteResponse")]
        void CallUnmute(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/CallUnmute", ReplyAction="http://tempuri.org/ILargeScaleConference/CallUnmuteResponse")]
        System.Threading.Tasks.Task CallUnmuteAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/IncreaseCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/IncreaseCallVolumeResponse")]
        void IncreaseCallVolume(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/IncreaseCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/IncreaseCallVolumeResponse")]
        System.Threading.Tasks.Task IncreaseCallVolumeAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DecreaseCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/DecreaseCallVolumeResponse")]
        void DecreaseCallVolume(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/DecreaseCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/DecreaseCallVolumeResponse")]
        System.Threading.Tasks.Task DecreaseCallVolumeAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCallVolumeResponse")]
        void SetCallVolume(string loginToken, string call_id, int volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetCallVolume", ReplyAction="http://tempuri.org/ILargeScaleConference/SetCallVolumeResponse")]
        System.Threading.Tasks.Task SetCallVolumeAsync(string loginToken, string call_id, int volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/RemoveCall", ReplyAction="http://tempuri.org/ILargeScaleConference/RemoveCallResponse")]
        void RemoveCall(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/RemoveCall", ReplyAction="http://tempuri.org/ILargeScaleConference/RemoveCallResponse")]
        System.Threading.Tasks.Task RemoveCallAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/RemoveCallAndMarkBlocked", ReplyAction="http://tempuri.org/ILargeScaleConference/RemoveCallAndMarkBlockedResponse")]
        void RemoveCallAndMarkBlocked(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/RemoveCallAndMarkBlocked", ReplyAction="http://tempuri.org/ILargeScaleConference/RemoveCallAndMarkBlockedResponse")]
        System.Threading.Tasks.Task RemoveCallAndMarkBlockedAsync(string loginToken, string call_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SendConferenceStatusReport", ReplyAction="http://tempuri.org/ILargeScaleConference/SendConferenceStatusReportResponse")]
        void SendConferenceStatusReport(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SendConferenceStatusReport", ReplyAction="http://tempuri.org/ILargeScaleConference/SendConferenceStatusReportResponse")]
        System.Threading.Tasks.Task SendConferenceStatusReportAsync(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/LockConference", ReplyAction="http://tempuri.org/ILargeScaleConference/LockConferenceResponse")]
        void LockConference(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/LockConference", ReplyAction="http://tempuri.org/ILargeScaleConference/LockConferenceResponse")]
        System.Threading.Tasks.Task LockConferenceAsync(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/UnlockConference", ReplyAction="http://tempuri.org/ILargeScaleConference/UnlockConferenceResponse")]
        void UnlockConference(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/UnlockConference", ReplyAction="http://tempuri.org/ILargeScaleConference/UnlockConferenceResponse")]
        System.Threading.Tasks.Task UnlockConferenceAsync(string loginToken, string conference_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetAttendeeName", ReplyAction="http://tempuri.org/ILargeScaleConference/SetAttendeeNameResponse")]
        void SetAttendeeName(string loginToken, string call_id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetAttendeeName", ReplyAction="http://tempuri.org/ILargeScaleConference/SetAttendeeNameResponse")]
        System.Threading.Tasks.Task SetAttendeeNameAsync(string loginToken, string call_id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/StartRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/StartRecordingResponse")]
        void StartRecording(string loginToken, string conf_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/StartRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/StartRecordingResponse")]
        System.Threading.Tasks.Task StartRecordingAsync(string loginToken, string conf_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/StopRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/StopRecordingResponse")]
        void StopRecording(string loginToken, string conf_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/StopRecording", ReplyAction="http://tempuri.org/ILargeScaleConference/StopRecordingResponse")]
        System.Threading.Tasks.Task StopRecordingAsync(string loginToken, string conf_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetEntryMode", ReplyAction="http://tempuri.org/ILargeScaleConference/SetEntryModeResponse")]
        void SetEntryMode(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryMode_e entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetEntryMode", ReplyAction="http://tempuri.org/ILargeScaleConference/SetEntryModeResponse")]
        System.Threading.Tasks.Task SetEntryModeAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryMode_e entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetEntryAction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetEntryActionResponse")]
        void SetEntryAction(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryAction_e entryAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetEntryAction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetEntryActionResponse")]
        System.Threading.Tasks.Task SetEntryActionAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryAction_e entryAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetExitAction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetExitActionResponse")]
        void SetExitAction(string loginToken, string conf_id, Common.LargeScaleConferenceV1.ExitAction_e exitAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetExitAction", ReplyAction="http://tempuri.org/ILargeScaleConference/SetExitActionResponse")]
        System.Threading.Tasks.Task SetExitActionAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.ExitAction_e exitAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetTerminateOnExit", ReplyAction="http://tempuri.org/ILargeScaleConference/SetTerminateOnExitResponse")]
        void SetTerminateOnExit(string loginToken, string conf_id, bool terminate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetTerminateOnExit", ReplyAction="http://tempuri.org/ILargeScaleConference/SetTerminateOnExitResponse")]
        System.Threading.Tasks.Task SetTerminateOnExitAsync(string loginToken, string conf_id, bool terminate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetPlayAttendeeCount", ReplyAction="http://tempuri.org/ILargeScaleConference/SetPlayAttendeeCountResponse")]
        void SetPlayAttendeeCount(string loginToken, string conf_id, bool playCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetPlayAttendeeCount", ReplyAction="http://tempuri.org/ILargeScaleConference/SetPlayAttendeeCountResponse")]
        System.Threading.Tasks.Task SetPlayAttendeeCountAsync(string loginToken, string conf_id, bool playCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetSendEmail", ReplyAction="http://tempuri.org/ILargeScaleConference/SetSendEmailResponse")]
        void SetSendEmail(string loginToken, string conf_id, bool sendEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILargeScaleConference/SetSendEmail", ReplyAction="http://tempuri.org/ILargeScaleConference/SetSendEmailResponse")]
        System.Threading.Tasks.Task SetSendEmailAsync(string loginToken, string conf_id, bool sendEmail);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILargeScaleConferenceChannel : Common.LargeScaleConferenceV1.ILargeScaleConference, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LargeScaleConferenceClient : System.ServiceModel.ClientBase<Common.LargeScaleConferenceV1.ILargeScaleConference>, Common.LargeScaleConferenceV1.ILargeScaleConference {
        
        public LargeScaleConferenceClient() {
        }
        
        public LargeScaleConferenceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LargeScaleConferenceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LargeScaleConferenceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LargeScaleConferenceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteRecording(string loginToken, string accountID, string recordingFile) {
            base.Channel.DeleteRecording(loginToken, accountID, recordingFile);
        }
        
        public System.Threading.Tasks.Task DeleteRecordingAsync(string loginToken, string accountID, string recordingFile) {
            return base.Channel.DeleteRecordingAsync(loginToken, accountID, recordingFile);
        }
        
        public Common.LargeScaleConferenceV1.RecordingsType FindRecording(string loginToken, string accountID, string recordingFile) {
            return base.Channel.FindRecording(loginToken, accountID, recordingFile);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.RecordingsType> FindRecordingAsync(string loginToken, string accountID, string recordingFile) {
            return base.Channel.FindRecordingAsync(loginToken, accountID, recordingFile);
        }
        
        public Common.LargeScaleConferenceV1.RecordingsType[] FindRecordingsForFreeConference(string loginToken, string accountID) {
            return base.Channel.FindRecordingsForFreeConference(loginToken, accountID);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.RecordingsType[]> FindRecordingsForFreeConferenceAsync(string loginToken, string accountID) {
            return base.Channel.FindRecordingsForFreeConferenceAsync(loginToken, accountID);
        }
        
        public void InsertBlackListEntry(string loginToken, Common.LargeScaleConferenceV1.BlackListType blackListEntry) {
            base.Channel.InsertBlackListEntry(loginToken, blackListEntry);
        }
        
        public System.Threading.Tasks.Task InsertBlackListEntryAsync(string loginToken, Common.LargeScaleConferenceV1.BlackListType blackListEntry) {
            return base.Channel.InsertBlackListEntryAsync(loginToken, blackListEntry);
        }
        
        public void DeleteBlackListEntry(string loginToken, string accountId, string callingParty) {
            base.Channel.DeleteBlackListEntry(loginToken, accountId, callingParty);
        }
        
        public System.Threading.Tasks.Task DeleteBlackListEntryAsync(string loginToken, string accountId, string callingParty) {
            return base.Channel.DeleteBlackListEntryAsync(loginToken, accountId, callingParty);
        }
        
        public Common.LargeScaleConferenceV1.BlackListType FindBlackListEntry(string loginToken, string accountId, string callingParty) {
            return base.Channel.FindBlackListEntry(loginToken, accountId, callingParty);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.BlackListType> FindBlackListEntryAsync(string loginToken, string accountId, string callingParty) {
            return base.Channel.FindBlackListEntryAsync(loginToken, accountId, callingParty);
        }
        
        public Common.LargeScaleConferenceV1.BlackListType[] FindBlackListEntriesForFreeConference(string loginToken, string accountId) {
            return base.Channel.FindBlackListEntriesForFreeConference(loginToken, accountId);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.BlackListType[]> FindBlackListEntriesForFreeConferenceAsync(string loginToken, string accountId) {
            return base.Channel.FindBlackListEntriesForFreeConferenceAsync(loginToken, accountId);
        }
        
        public void InsertAccessNumber(string loginToken, Common.LargeScaleConferenceV1.AccessNumberType accessNumberEntry) {
            base.Channel.InsertAccessNumber(loginToken, accessNumberEntry);
        }
        
        public System.Threading.Tasks.Task InsertAccessNumberAsync(string loginToken, Common.LargeScaleConferenceV1.AccessNumberType accessNumberEntry) {
            return base.Channel.InsertAccessNumberAsync(loginToken, accessNumberEntry);
        }
        
        public void DeleteAccessNumber(string loginToken, string accountID, string accessNumber) {
            base.Channel.DeleteAccessNumber(loginToken, accountID, accessNumber);
        }
        
        public System.Threading.Tasks.Task DeleteAccessNumberAsync(string loginToken, string accountID, string accessNumber) {
            return base.Channel.DeleteAccessNumberAsync(loginToken, accountID, accessNumber);
        }
        
        public Common.LargeScaleConferenceV1.AccessNumberType FindAccessNumber(string loginToken, string accountID, string accessNumber) {
            return base.Channel.FindAccessNumber(loginToken, accountID, accessNumber);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.AccessNumberType> FindAccessNumberAsync(string loginToken, string accountID, string accessNumber) {
            return base.Channel.FindAccessNumberAsync(loginToken, accountID, accessNumber);
        }
        
        public Common.LargeScaleConferenceV1.AccessNumberType[] FindAccessNumbersForFreeConference(string loginToken, string accountID) {
            return base.Channel.FindAccessNumbersForFreeConference(loginToken, accountID);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.AccessNumberType[]> FindAccessNumbersForFreeConferenceAsync(string loginToken, string accountID) {
            return base.Channel.FindAccessNumbersForFreeConferenceAsync(loginToken, accountID);
        }
        
        public string InsertFreeConference(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo) {
            return base.Channel.InsertFreeConference(loginToken, largeScaleConfSub, dedicated, subscriberInfo);
        }
        
        public System.Threading.Tasks.Task<string> InsertFreeConferenceAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo) {
            return base.Channel.InsertFreeConferenceAsync(loginToken, largeScaleConfSub, dedicated, subscriberInfo);
        }
        
        public void EditFreeConference(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, Common.LargeScaleConferenceV1.InternetAccessType internetAccess) {
            base.Channel.EditFreeConference(loginToken, largeScaleConfSub, internetAccess);
        }
        
        public System.Threading.Tasks.Task EditFreeConferenceAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, Common.LargeScaleConferenceV1.InternetAccessType internetAccess) {
            return base.Channel.EditFreeConferenceAsync(loginToken, largeScaleConfSub, internetAccess);
        }
        
        public void DeleteFreeConference(string loginToken, string subscriberAddress) {
            base.Channel.DeleteFreeConference(loginToken, subscriberAddress);
        }
        
        public System.Threading.Tasks.Task DeleteFreeConferenceAsync(string loginToken, string subscriberAddress) {
            return base.Channel.DeleteFreeConferenceAsync(loginToken, subscriberAddress);
        }
        
        public Common.LargeScaleConferenceV1.FreeConferenceType FindFreeConference(string loginToken, string subscriberAddress) {
            return base.Channel.FindFreeConference(loginToken, subscriberAddress);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType> FindFreeConferenceAsync(string loginToken, string subscriberAddress) {
            return base.Channel.FindFreeConferenceAsync(loginToken, subscriberAddress);
        }
        
        public Common.LargeScaleConferenceV1.FreeConferenceType[] GetFreeConferences(string loginToken) {
            return base.Channel.GetFreeConferences(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType[]> GetFreeConferencesAsync(string loginToken) {
            return base.Channel.GetFreeConferencesAsync(loginToken);
        }
        
        public string InsertFreeConferenceWAccountID(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo) {
            return base.Channel.InsertFreeConferenceWAccountID(loginToken, largeScaleConfSub, dedicated, subscriberInfo);
        }
        
        public System.Threading.Tasks.Task<string> InsertFreeConferenceWAccountIDAsync(string loginToken, Common.LargeScaleConferenceV1.FreeConferenceType largeScaleConfSub, bool dedicated, Common.LargeScaleConferenceV1.SubscriberType subscriberInfo) {
            return base.Channel.InsertFreeConferenceWAccountIDAsync(loginToken, largeScaleConfSub, dedicated, subscriberInfo);
        }
        
        public void DeleteFreeConferenceWAccountID(string loginToken, string accountID) {
            base.Channel.DeleteFreeConferenceWAccountID(loginToken, accountID);
        }
        
        public System.Threading.Tasks.Task DeleteFreeConferenceWAccountIDAsync(string loginToken, string accountID) {
            return base.Channel.DeleteFreeConferenceWAccountIDAsync(loginToken, accountID);
        }
        
        public Common.LargeScaleConferenceV1.FreeConferenceType FindFreeConferenceWAccountID(string loginToken, string accountID) {
            return base.Channel.FindFreeConferenceWAccountID(loginToken, accountID);
        }
        
        public System.Threading.Tasks.Task<Common.LargeScaleConferenceV1.FreeConferenceType> FindFreeConferenceWAccountIDAsync(string loginToken, string accountID) {
            return base.Channel.FindFreeConferenceWAccountIDAsync(loginToken, accountID);
        }
        
        public void SetCustomIntroduction(string loginToken, string subscriberAddress, byte[] customIntroduction) {
            base.Channel.SetCustomIntroduction(loginToken, subscriberAddress, customIntroduction);
        }
        
        public System.Threading.Tasks.Task SetCustomIntroductionAsync(string loginToken, string subscriberAddress, byte[] customIntroduction) {
            return base.Channel.SetCustomIntroductionAsync(loginToken, subscriberAddress, customIntroduction);
        }
        
        public void ResetCustomIntroduction(string loginToken, string subscriberAddress) {
            base.Channel.ResetCustomIntroduction(loginToken, subscriberAddress);
        }
        
        public System.Threading.Tasks.Task ResetCustomIntroductionAsync(string loginToken, string subscriberAddress) {
            return base.Channel.ResetCustomIntroductionAsync(loginToken, subscriberAddress);
        }
        
        public void SetCustomIntroductionWAccountID(string loginToken, string accountID, byte[] customIntroduction) {
            base.Channel.SetCustomIntroductionWAccountID(loginToken, accountID, customIntroduction);
        }
        
        public System.Threading.Tasks.Task SetCustomIntroductionWAccountIDAsync(string loginToken, string accountID, byte[] customIntroduction) {
            return base.Channel.SetCustomIntroductionWAccountIDAsync(loginToken, accountID, customIntroduction);
        }
        
        public void ResetCustomIntroductionWAccountID(string loginToken, string accountID) {
            base.Channel.ResetCustomIntroductionWAccountID(loginToken, accountID);
        }
        
        public System.Threading.Tasks.Task ResetCustomIntroductionWAccountIDAsync(string loginToken, string accountID) {
            return base.Channel.ResetCustomIntroductionWAccountIDAsync(loginToken, accountID);
        }
        
        public void CallMute(string loginToken, string call_id) {
            base.Channel.CallMute(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task CallMuteAsync(string loginToken, string call_id) {
            return base.Channel.CallMuteAsync(loginToken, call_id);
        }
        
        public void CallUnmute(string loginToken, string call_id) {
            base.Channel.CallUnmute(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task CallUnmuteAsync(string loginToken, string call_id) {
            return base.Channel.CallUnmuteAsync(loginToken, call_id);
        }
        
        public void IncreaseCallVolume(string loginToken, string call_id) {
            base.Channel.IncreaseCallVolume(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task IncreaseCallVolumeAsync(string loginToken, string call_id) {
            return base.Channel.IncreaseCallVolumeAsync(loginToken, call_id);
        }
        
        public void DecreaseCallVolume(string loginToken, string call_id) {
            base.Channel.DecreaseCallVolume(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task DecreaseCallVolumeAsync(string loginToken, string call_id) {
            return base.Channel.DecreaseCallVolumeAsync(loginToken, call_id);
        }
        
        public void SetCallVolume(string loginToken, string call_id, int volume) {
            base.Channel.SetCallVolume(loginToken, call_id, volume);
        }
        
        public System.Threading.Tasks.Task SetCallVolumeAsync(string loginToken, string call_id, int volume) {
            return base.Channel.SetCallVolumeAsync(loginToken, call_id, volume);
        }
        
        public void RemoveCall(string loginToken, string call_id) {
            base.Channel.RemoveCall(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task RemoveCallAsync(string loginToken, string call_id) {
            return base.Channel.RemoveCallAsync(loginToken, call_id);
        }
        
        public void RemoveCallAndMarkBlocked(string loginToken, string call_id) {
            base.Channel.RemoveCallAndMarkBlocked(loginToken, call_id);
        }
        
        public System.Threading.Tasks.Task RemoveCallAndMarkBlockedAsync(string loginToken, string call_id) {
            return base.Channel.RemoveCallAndMarkBlockedAsync(loginToken, call_id);
        }
        
        public void SendConferenceStatusReport(string loginToken, string conference_id) {
            base.Channel.SendConferenceStatusReport(loginToken, conference_id);
        }
        
        public System.Threading.Tasks.Task SendConferenceStatusReportAsync(string loginToken, string conference_id) {
            return base.Channel.SendConferenceStatusReportAsync(loginToken, conference_id);
        }
        
        public void LockConference(string loginToken, string conference_id) {
            base.Channel.LockConference(loginToken, conference_id);
        }
        
        public System.Threading.Tasks.Task LockConferenceAsync(string loginToken, string conference_id) {
            return base.Channel.LockConferenceAsync(loginToken, conference_id);
        }
        
        public void UnlockConference(string loginToken, string conference_id) {
            base.Channel.UnlockConference(loginToken, conference_id);
        }
        
        public System.Threading.Tasks.Task UnlockConferenceAsync(string loginToken, string conference_id) {
            return base.Channel.UnlockConferenceAsync(loginToken, conference_id);
        }
        
        public void SetAttendeeName(string loginToken, string call_id, string name) {
            base.Channel.SetAttendeeName(loginToken, call_id, name);
        }
        
        public System.Threading.Tasks.Task SetAttendeeNameAsync(string loginToken, string call_id, string name) {
            return base.Channel.SetAttendeeNameAsync(loginToken, call_id, name);
        }
        
        public void StartRecording(string loginToken, string conf_id) {
            base.Channel.StartRecording(loginToken, conf_id);
        }
        
        public System.Threading.Tasks.Task StartRecordingAsync(string loginToken, string conf_id) {
            return base.Channel.StartRecordingAsync(loginToken, conf_id);
        }
        
        public void StopRecording(string loginToken, string conf_id) {
            base.Channel.StopRecording(loginToken, conf_id);
        }
        
        public System.Threading.Tasks.Task StopRecordingAsync(string loginToken, string conf_id) {
            return base.Channel.StopRecordingAsync(loginToken, conf_id);
        }
        
        public void SetEntryMode(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryMode_e entryMode) {
            base.Channel.SetEntryMode(loginToken, conf_id, entryMode);
        }
        
        public System.Threading.Tasks.Task SetEntryModeAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryMode_e entryMode) {
            return base.Channel.SetEntryModeAsync(loginToken, conf_id, entryMode);
        }
        
        public void SetEntryAction(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryAction_e entryAction) {
            base.Channel.SetEntryAction(loginToken, conf_id, entryAction);
        }
        
        public System.Threading.Tasks.Task SetEntryActionAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.EntryAction_e entryAction) {
            return base.Channel.SetEntryActionAsync(loginToken, conf_id, entryAction);
        }
        
        public void SetExitAction(string loginToken, string conf_id, Common.LargeScaleConferenceV1.ExitAction_e exitAction) {
            base.Channel.SetExitAction(loginToken, conf_id, exitAction);
        }
        
        public System.Threading.Tasks.Task SetExitActionAsync(string loginToken, string conf_id, Common.LargeScaleConferenceV1.ExitAction_e exitAction) {
            return base.Channel.SetExitActionAsync(loginToken, conf_id, exitAction);
        }
        
        public void SetTerminateOnExit(string loginToken, string conf_id, bool terminate) {
            base.Channel.SetTerminateOnExit(loginToken, conf_id, terminate);
        }
        
        public System.Threading.Tasks.Task SetTerminateOnExitAsync(string loginToken, string conf_id, bool terminate) {
            return base.Channel.SetTerminateOnExitAsync(loginToken, conf_id, terminate);
        }
        
        public void SetPlayAttendeeCount(string loginToken, string conf_id, bool playCount) {
            base.Channel.SetPlayAttendeeCount(loginToken, conf_id, playCount);
        }
        
        public System.Threading.Tasks.Task SetPlayAttendeeCountAsync(string loginToken, string conf_id, bool playCount) {
            return base.Channel.SetPlayAttendeeCountAsync(loginToken, conf_id, playCount);
        }
        
        public void SetSendEmail(string loginToken, string conf_id, bool sendEmail) {
            base.Channel.SetSendEmail(loginToken, conf_id, sendEmail);
        }
        
        public System.Threading.Tasks.Task SetSendEmailAsync(string loginToken, string conf_id, bool sendEmail) {
            return base.Channel.SetSendEmailAsync(loginToken, conf_id, sendEmail);
        }
    }
}
