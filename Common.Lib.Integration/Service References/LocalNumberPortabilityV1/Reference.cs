//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common.LocalNumberPortabilityV1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LNPType", Namespace="http://schemas.datacontract.org/2004/07/LocalNumberPortabilityV1")]
    [System.SerializableAttribute()]
    public partial class LNPType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RNField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DN {
            get {
                return this.DNField;
            }
            set {
                if ((object.ReferenceEquals(this.DNField, value) != true)) {
                    this.DNField = value;
                    this.RaisePropertyChanged("DN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RN {
            get {
                return this.RNField;
            }
            set {
                if ((object.ReferenceEquals(this.RNField, value) != true)) {
                    this.RNField = value;
                    this.RaisePropertyChanged("RN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LocalNumberPortabilityV1.ILocalNumberPortability")]
    public interface ILocalNumberPortability {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntryResponse")]
        void InsertPortabilityEntry(string loginToken, Common.LocalNumberPortabilityV1.LNPType portabilityEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntryResponse")]
        System.Threading.Tasks.Task InsertPortabilityEntryAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType portabilityEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntryResponse")]
        void DeletePortabilityEntry(string loginToken, string dn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntryResponse")]
        System.Threading.Tasks.Task DeletePortabilityEntryAsync(string loginToken, string dn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntriesResponse")]
        void InsertPortabilityEntries(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/InsertPortabilityEntriesResponse")]
        System.Threading.Tasks.Task InsertPortabilityEntriesAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntriesResponse")]
        void DeletePortabilityEntries(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/DeletePortabilityEntriesResponse")]
        System.Threading.Tasks.Task DeletePortabilityEntriesAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/FindPortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/FindPortabilityEntryResponse")]
        Common.LocalNumberPortabilityV1.LNPType FindPortabilityEntry(string loginToken, string dn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/FindPortabilityEntry", ReplyAction="http://tempuri.org/ILocalNumberPortability/FindPortabilityEntryResponse")]
        System.Threading.Tasks.Task<Common.LocalNumberPortabilityV1.LNPType> FindPortabilityEntryAsync(string loginToken, string dn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/GetAllPortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/GetAllPortabilityEntriesResponse")]
        Common.LocalNumberPortabilityV1.LNPType[] GetAllPortabilityEntries(string loginToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalNumberPortability/GetAllPortabilityEntries", ReplyAction="http://tempuri.org/ILocalNumberPortability/GetAllPortabilityEntriesResponse")]
        System.Threading.Tasks.Task<Common.LocalNumberPortabilityV1.LNPType[]> GetAllPortabilityEntriesAsync(string loginToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocalNumberPortabilityChannel : Common.LocalNumberPortabilityV1.ILocalNumberPortability, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocalNumberPortabilityClient : System.ServiceModel.ClientBase<Common.LocalNumberPortabilityV1.ILocalNumberPortability>, Common.LocalNumberPortabilityV1.ILocalNumberPortability {
        
        public LocalNumberPortabilityClient() {
        }
        
        public LocalNumberPortabilityClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocalNumberPortabilityClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalNumberPortabilityClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalNumberPortabilityClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertPortabilityEntry(string loginToken, Common.LocalNumberPortabilityV1.LNPType portabilityEntry) {
            base.Channel.InsertPortabilityEntry(loginToken, portabilityEntry);
        }
        
        public System.Threading.Tasks.Task InsertPortabilityEntryAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType portabilityEntry) {
            return base.Channel.InsertPortabilityEntryAsync(loginToken, portabilityEntry);
        }
        
        public void DeletePortabilityEntry(string loginToken, string dn) {
            base.Channel.DeletePortabilityEntry(loginToken, dn);
        }
        
        public System.Threading.Tasks.Task DeletePortabilityEntryAsync(string loginToken, string dn) {
            return base.Channel.DeletePortabilityEntryAsync(loginToken, dn);
        }
        
        public void InsertPortabilityEntries(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries) {
            base.Channel.InsertPortabilityEntries(loginToken, portabilityEntries);
        }
        
        public System.Threading.Tasks.Task InsertPortabilityEntriesAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries) {
            return base.Channel.InsertPortabilityEntriesAsync(loginToken, portabilityEntries);
        }
        
        public void DeletePortabilityEntries(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries) {
            base.Channel.DeletePortabilityEntries(loginToken, portabilityEntries);
        }
        
        public System.Threading.Tasks.Task DeletePortabilityEntriesAsync(string loginToken, Common.LocalNumberPortabilityV1.LNPType[] portabilityEntries) {
            return base.Channel.DeletePortabilityEntriesAsync(loginToken, portabilityEntries);
        }
        
        public Common.LocalNumberPortabilityV1.LNPType FindPortabilityEntry(string loginToken, string dn) {
            return base.Channel.FindPortabilityEntry(loginToken, dn);
        }
        
        public System.Threading.Tasks.Task<Common.LocalNumberPortabilityV1.LNPType> FindPortabilityEntryAsync(string loginToken, string dn) {
            return base.Channel.FindPortabilityEntryAsync(loginToken, dn);
        }
        
        public Common.LocalNumberPortabilityV1.LNPType[] GetAllPortabilityEntries(string loginToken) {
            return base.Channel.GetAllPortabilityEntries(loginToken);
        }
        
        public System.Threading.Tasks.Task<Common.LocalNumberPortabilityV1.LNPType[]> GetAllPortabilityEntriesAsync(string loginToken) {
            return base.Channel.GetAllPortabilityEntriesAsync(loginToken);
        }
    }
}
